package sharp.unit;

import sharp.utility.CVector;

import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;

public class HingedUnit extends ComplexUnit {


    private CVector initialPosition = new CVector();
    private ArrayList<HingedUnit> childHingedUnits = new ArrayList<>();
    private HingedUnit parentHinge = null;
    private SimpleUnit rootUnit;
    private int hinge;
    
    public HingedUnit(SimpleUnit rootUnit) {
	super(rootUnit.getProjection(), rootUnit);
	this.rootUnit = rootUnit;
	initialPosition.set(rootUnit.getProjection().getPivot());
    }

    public CVector getInitialPosition() {
	
    }
    
    public HingedUnit getParentHinge() {
	return parentHinge;
    }
    
    public int getHinge() {
	return hinge;
    }
    
    public void setParentHinge(HingedUnit parentHinge, int hinge) {
	if (parentHinge.getRootUnit().getProjection().getOutline().size() == 0) {
	    System.out.println(parentHinge.toString() + " is bad hinge unit.");
	}
	this.parentHinge = parentHinge;
	this.hinge = hinge;
	if (parentHinge.getRootUnit().getProjection().getOutline().size() <= hinge) {
	    hinge = parentHinge.getRootUnit().getProjection().getOutline().size() - 1;
	} else if (hinge < 0) {
	    hinge = 0;
	}
	rootUnit.getPivot()
	    .set(parentHinge.getRootUnit().getProjection().getOutline().get(hinge));
    }    

    public void setRootUnit(SimpleUnit u) {
	if (getChildUnits().size() > 0) {
	    System.out.println("Warning! HingedUnit losing child units.");
	}
	for (HingedUnit hu: getAllChildHinges()) {
	    if (getChildUnits().contains(hu)) {
		getChildUnits().remove(hu);
	    }
	}
	if (getChildUnits().contains(rootUnit)) {
	    getChildUnits().remove(rootUnit);
	}
	rootUnit = u;
	super.addChildUnit(u);
    }

    public SimpleUnit getRootUnit() {
	return rootUnit;
    }

    public List<HingedUnit> getChildHinges() {
	return childHingedUnits;
    }

    public List<HingedUnit> getAllChildHinges() {
	ArrayList<HingedUnit> allChildren = new ArrayList<>();
	for (HingedUnit childU: childHingedUnits) {
	    allChildren.add(childU);
	    List<HingedUnit> childs = childU.getAllChildHinges();
	    for (HingedUnit u: childs) {
		allChildren.add(u);
	    }
	}
	return allChildren;
    }

    public void addHingedUnit(HingedUnit hu, int hinge) {
	hu.setParentHinge(this, hinge);
	super.addChildUnit(hu);
    }

    public void endUpdate() {
	super.endUpdate();
	initialPosition.set(rootUnit.getProjection().getPivot());
    }
    
}

package sharp.unit;

import sharp.game.App;
import sharp.utility.Transform;
import sharp.utility.Translatable;
import sharp.utility.CVector;
import sharp.utility.Anchor;
import sharp.collision.Collidable;
import sharp.collision.Projection;
import sharp.collision.Collision;

import java.util.LinkedList;
import java.util.ArrayList;

import javafx.scene.shape.Polygon;

public class Poly extends Projection {

    private Polygon p;
    
    public Poly(Anchor pivot, CVector ... points) {
	setup(pivot, points);
	p = new Polygon();
    }
    
    public int update() {
	return super.update();
    }

    public void endUpdate() {
	adjustPoly(true);
	super.endUpdate();
    }

    public Polygon getNode() {
	return p;
    }
    
    public void correctPoly() {
	while (p.getPoints().size() != getOutline().size() * 2) {
	    if (p.getPoints().size() < getOutline().size() * 2) {
		p.getPoints().add(0.0);
	    } else if (p.getPoints().size() > getOutline().size() * 2) {
		p.getPoints().remove(p.getPoints().size() - 1);
	    }
	}
    }

    public void adjustPoly() {
	for (int i = 0; i < p.getPoints().size(); i += 2) {
	    CVector point = getOutline().get(i / 2);
	    p.getPoints().set(i, point.getX());
	    p.getPoints().set(i + 1, point.getY());
	}
    }

    public void adjustPoly(boolean checkSize) {
	if (checkSize) {
	    correctPoly();
	}
	adjustPoly();
    }

    public String toString() {
	return "Poly: Vertices(" + getOutline().size() + "), Priority(" + getPriority() + ")";
    }
    
}
